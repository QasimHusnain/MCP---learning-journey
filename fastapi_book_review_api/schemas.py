from pydantic import BaseModel, EmailStr   # Pydantic → Base class for schemas, EmailStr validates emails
from typing import Optional, List          # Optional for nullable fields, List for arrays in response


# ---------- User Schemas ----------
class UserCreate(BaseModel):               # Schema for creating a user (request body)
    username: str                          # Required username
    email: EmailStr                        # Required, validated as an email
    password: str                          # Required password


class UserOut(BaseModel):                  # Schema for returning user info (response)
    id: int                                # User ID (auto-generated by DB)
    username: str                          # Username
    email: EmailStr                        # Email
    class Config:
        orm_mode = True                    # Allows conversion from SQLAlchemy model → Pydantic


class Token(BaseModel):                    # Schema for login/auth response
    access_token: str                      # JWT access token
    token_type: str = "bearer"             # Default token type = bearer


# ---------- Book Schemas ----------
class BookBase(BaseModel):                 # Shared fields between input/output
    title: str                             # Book title
    author: str                            # Author name
    description: Optional[str] = None      # Optional description


class BookCreate(BookBase):                # Input schema for creating a book
    pass                                   # Inherits fields from BookBase


class BookOut(BookBase):                   # Output schema for returning book info
    id: int                                # Book ID
    class Config:
        orm_mode = True                    # Convert SQLAlchemy object → Pydantic schema


# ---------- Review Schemas ----------
class ReviewBase(BaseModel):               # Shared fields between input/output
    content: str                           # Review text
    rating: float                          # Rating (float)


class ReviewCreate(ReviewBase):            # Input schema for creating review
    pass                                   # Inherits fields from ReviewBase


class ReviewOut(ReviewBase):               # Output schema for returning review info
    id: int                                # Review ID
    user_id: int                           # User who posted review
    book_id: int                           # Book being reviewed
    class Config:
        orm_mode = True                    # Convert SQLAlchemy → Pydantic
